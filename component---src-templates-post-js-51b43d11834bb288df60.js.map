{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/components/useAuthors.js","webpack:///./src/components/authors.js"],"names":["Post","props","authors","useAuthors","page","data","markdownRemark","formOptions","actions","DeleteAction","fields","label","name","component","parse","filename","uploadDir","previewSrc","formValues","frontmatter","hero","image","childImageSharp","fluid","src","useLocalRemarkForm","form","date","length","authorIDs","to","format","dangerouslySetInnerHTML","__html","html","draft","process","postQuery","useStaticQuery","settingsJson","ListAuthors","filter","author","find","id","map","index","AuthorsForm","itemProps","item","key","defaultItem","Math","random","toString","substr","email","link","value"],"mappings":"gQAuGeA,UAlFf,SAAcC,GACZ,IAAMC,EAAUC,cACVC,EAAOH,EAAMI,KAAKC,eAClBC,EAAc,CAClBC,QAAS,CAACC,gBACVC,OAAQ,CACN,CACEC,MAAO,QACPC,KAAM,uBACNC,UAAW,QAEb,CACEF,MAAO,UACPC,KAAM,yBACNC,UAAW,UACXX,QAASA,GAEX,CACEU,KAAM,uBACNC,UAAW,SACXF,MAAO,SAET,CACEA,MAAO,OACPC,KAAM,sBACNC,UAAW,QAEb,CACEF,MAAO,aACPC,KAAM,4BACNC,UAAW,QACXC,MAAO,SAACC,GAAD,mBAA2BA,GAClCC,UAAW,qCACXC,WAAY,SAACC,GACX,OACGA,EAAWC,YAAYC,MACvBF,EAAWC,YAAYC,KAAKC,MAGxBH,EAAWC,YAAYC,KAAKC,MAAMC,gBAAgBC,MAAMC,IADtD,OAtCE,EA6CEC,6BAAmBrB,EAAMG,GAAvCF,EA7CY,KA6CNqB,EA7CM,KA+CnB,OACE,kBAAC,IAAD,CAAYA,KAAMA,GAChB,kBAAC,IAAD,CAAYtB,KAAMC,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAWA,EAAKc,YAAYQ,MAC3BtB,EAAKc,YAAYjB,SAAWG,EAAKc,YAAYjB,QAAQ0B,OAAS,GAC7D,kBAAC,IAAD,KACE,kCADF,IAEE,kBAAC,IAAD,CAAaC,UAAWxB,EAAKc,YAAYjB,WAG7C,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAM4B,GAAG,SAAT,oBAGJ,4BACE,kBAAC,IAAD,CAAiBlB,KAAK,0BAExB,6BACA,kBAAC,IAAD,CAAeA,KAAK,kBAAkBmB,OAAO,YAC3C,yBACEC,wBAAyB,CACvBC,OAAQ5B,EAAK6B,SAIlB7B,EAAKc,YAAYgB,OAAS,kBAAC,IAAD,eAC1BC,MAOIpC,IAEFqC,EAAS,c,kCCzGtB,kDAEalC,EAAa,WAaxB,OAZyBmC,yBAAe,cAAhCC,aAYYrC,U,kCCftB,oFAEasC,EAAc,SAAC,GAAmB,IAAjBX,EAAgB,EAAhBA,UACtB3B,EAAUC,cAAasC,QAAO,SAAAC,GAAM,OACxCb,EAAUc,MAAK,SAAAC,GAAE,OAAIA,IAAOF,EAAOE,SAWrC,OARmB1C,EAAQ2C,KAAI,SAACH,EAAQI,GACtC,OAAI5C,EAAQ0B,SAAWkB,EAAQ,EACtBJ,EAAO9B,KAEP8B,EAAO9B,KAAO,SAOdmC,EAAc,CACzBpC,MAAO,UACPD,OAAQ,CACN,CACEC,MAAO,UACPC,KAAM,kBACNC,UAAW,aACXmC,UAAW,SAAAC,GAAI,MAAK,CAClBC,IAAKD,EAAKL,GACVjC,MAAOsC,EAAKrC,OAEduC,YAAa,iBAAO,CAClBvC,KAAM,aACNgC,GAAIQ,KAAKC,SACNC,SAAS,IACTC,OAAO,EAAG,GACbC,MAAO,GACPC,KAAM,KAER/C,OAAQ,CACN,CACEC,MAAO,OACPC,KAAM,OACNC,UAAW,OACXC,MAJF,SAIQ4C,GACJ,OAAOA,GAAS,KAGpB,CACE/C,MAAO,QACPC,KAAM,QACNC,UAAW,OACXC,MAJF,SAIQ4C,GACJ,OAAOA,GAAS,KAGpB,CACE/C,MAAO,OACPC,KAAM,OACNC,UAAW,OACXC,MAJF,SAIQ4C,GACJ,OAAOA,GAAS","file":"component---src-templates-post-js-51b43d11834bb288df60.js","sourcesContent":["import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport {\r\n  Paper,\r\n  Meta,\r\n  MetaSpan,\r\n  MetaActions,\r\n  DraftBadge,\r\n} from \"../components/style\"\r\nimport { EditToggle } from \"../components/editToggle\"\r\nimport { ListAuthors } from \"../components/authors\"\r\nimport { Link } from \"gatsby\"\r\nimport { PageLayout } from \"../components/pageLayout\"\r\nimport { useLocalRemarkForm, DeleteAction } from \"gatsby-tinacms-remark\"\r\nimport {\r\n  InlineForm,\r\n  InlineTextField,\r\n  InlineWysiwyg,\r\n} from \"react-tinacms-inline\"\r\nimport { useAuthors } from \"../components/useAuthors\"\r\n\r\nfunction Post(props) {\r\n  const authors = useAuthors()\r\n  const page = props.data.markdownRemark\r\n  const formOptions = {\r\n    actions: [DeleteAction],\r\n    fields: [\r\n      {\r\n        label: \"Title\",\r\n        name: \"rawFrontmatter.title\",\r\n        component: \"text\",\r\n      },\r\n      {\r\n        label: \"Authors\",\r\n        name: \"rawFrontmatter.authors\",\r\n        component: \"authors\",\r\n        authors: authors,\r\n      },\r\n      {\r\n        name: \"rawFrontmatter.draft\",\r\n        component: \"toggle\",\r\n        label: \"Draft\",\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        name: \"rawFrontmatter.date\",\r\n        component: \"date\",\r\n      },\r\n      {\r\n        label: \"Hero Image\",\r\n        name: \"rawFrontmatter.hero.image\",\r\n        component: \"image\",\r\n        parse: (filename) => `../images/${filename}`,\r\n        uploadDir: () => `/content/images/`,\r\n        previewSrc: (formValues) => {\r\n          if (\r\n            !formValues.frontmatter.hero ||\r\n            !formValues.frontmatter.hero.image\r\n          )\r\n            return \"\"\r\n          return formValues.frontmatter.hero.image.childImageSharp.fluid.src\r\n        },\r\n      },\r\n    ],\r\n  }\r\n\r\n  const [data, form] = useLocalRemarkForm(page, formOptions)\r\n\r\n  return (\r\n    <InlineForm form={form}>\r\n      <PageLayout page={data}>\r\n        <Paper>\r\n          <Meta>\r\n            <MetaSpan>{data.frontmatter.date}</MetaSpan>\r\n            {data.frontmatter.authors && data.frontmatter.authors.length > 0 && (\r\n              <MetaSpan>\r\n                <em>By</em>&nbsp;\r\n                <ListAuthors authorIDs={data.frontmatter.authors} />\r\n              </MetaSpan>\r\n            )}\r\n            <MetaActions>\r\n              <Link to=\"/blog\">‚Üê Back to Blog</Link>\r\n            </MetaActions>\r\n          </Meta>\r\n          <h1>\r\n            <InlineTextField name=\"rawFrontmatter.title\" />\r\n          </h1>\r\n          <hr />\r\n          <InlineWysiwyg name=\"rawMarkdownBody\" format=\"markdown\">\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: data.html,\r\n              }}\r\n            />\r\n          </InlineWysiwyg>\r\n          {data.frontmatter.draft && <DraftBadge>Draft</DraftBadge>}\r\n          {process.env.NODE_ENV !== \"production\" && <EditToggle />}\r\n        </Paper>\r\n      </PageLayout>\r\n    </InlineForm>\r\n  )\r\n}\r\n\r\nexport default Post\r\n\r\nexport const postQuery = graphql`\r\n  query($path: String!) {\r\n    markdownRemark(\r\n      published: { eq: true }\r\n      frontmatter: { path: { eq: $path } }\r\n    ) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n\r\n      frontmatter {\r\n        path\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        draft\r\n        authors\r\n        hero {\r\n          large\r\n          overlay\r\n          image {\r\n            childImageSharp {\r\n              fluid(quality: 70, maxWidth: 1920) {\r\n                ...GatsbyImageSharpFluid_withWebp\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      fileRelativePath\r\n      rawFrontmatter\r\n      rawMarkdownBody\r\n    }\r\n    settingsJson(fileRelativePath: { eq: \"/content/settings/authors.json\" }) {\r\n      ...authors\r\n    }\r\n  }\r\n`\r\n","import { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nexport const useAuthors = () => {\r\n  const { settingsJson } = useStaticQuery(\r\n    graphql`\r\n      query authorsQuery {\r\n        settingsJson(\r\n          fileRelativePath: { eq: \"/content/settings/authors.json\" }\r\n        ) {\r\n          ...authors\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  return settingsJson.authors\r\n}\r\n\r\nexport const authorsFragment = graphql`\r\n  fragment authors on SettingsJson {\r\n    authors {\r\n      email\r\n      name\r\n      id\r\n      link\r\n    }\r\n  }\r\n`\r\n","import { useAuthors } from \"./useAuthors\"\r\n\r\nexport const ListAuthors = ({ authorIDs }) => {\r\n  const authors = useAuthors().filter(author =>\r\n    authorIDs.find(id => id === author.id)\r\n  )\r\n\r\n  const authorList = authors.map((author, index) => {\r\n    if (authors.length === index + 1) {\r\n      return author.name\r\n    } else {\r\n      return author.name + \", \"\r\n    }\r\n  })\r\n\r\n  return authorList\r\n}\r\n\r\nexport const AuthorsForm = {\r\n  label: \"Authors\",\r\n  fields: [\r\n    {\r\n      label: \"Authors\",\r\n      name: \"rawJson.authors\",\r\n      component: \"group-list\",\r\n      itemProps: item => ({\r\n        key: item.id,\r\n        label: item.name,\r\n      }),\r\n      defaultItem: () => ({\r\n        name: \"New Author\",\r\n        id: Math.random()\r\n          .toString(36)\r\n          .substr(2, 9),\r\n        email: \"\",\r\n        link: \"\",\r\n      }),\r\n      fields: [\r\n        {\r\n          label: \"Name\",\r\n          name: \"name\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n        {\r\n          label: \"Email\",\r\n          name: \"email\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n        {\r\n          label: \"Link\",\r\n          name: \"link\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}\r\n"],"sourceRoot":""}